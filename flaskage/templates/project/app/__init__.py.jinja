# -*- coding: utf-8 -*-
import os
import logging

from flask import Flask, render_template
from flask.ext.sqlalchemy import SQLAlchemy
from flask.ext.migrate import Migrate
from flask.ext.assets import Environment, Bundle
from flask.ext.login import LoginManager

from config import AVAILABLE_CONFIGS

db = SQLAlchemy()
migrate = Migrate()
assets = Environment()
login_manager = LoginManager()


def create_app(config):
    app = Flask(__name__)
    configure_app(app, config)
    configure_assets()
    configure_extensions(app, db)
    configure_logging(app)
    configure_hooks(app)
    configure_error_handlers(app)
    configure_blueprints(app)
    return app


def configure_app(app, config):
    app.config.from_object(AVAILABLE_CONFIGS[config])


def configure_assets():
    assets.register(
        'css_all',
        Bundle(
            Bundle(
                'stylesheets/application.less',
                filters=['less']
            ),
            filters=['cleancss'], output='application.css'
        )
    )
    assets.register(
        'js_all',
        Bundle(
            'jquery/dist/jquery.js',
            'bootstrap/dist/js/bootstrap.js',
            Bundle(
                'javascripts/application.coffee',
                filters=['coffeescript']
            ),
            filters=['uglifyjs'], output='application.js'
        )
    )
    assets.register(
        'js_ie8',
        Bundle(
            'html5shiv/dist/html5shiv.js',
            'respond/dest/respond.src.js',
            filters=['uglifyjs'], output='ie8.js'
        )
    )


def configure_hooks(app):
    # @app.before_request
    # def before_request():
    #     pass
    pass


def configure_blueprints(app):
    from .views import welcome
    app.register_blueprint(welcome.mod)


def configure_extensions(app, db):
    db.init_app(app)
    migrate.init_app(app, db, directory=os.path.join('db', 'migrations'))
    assets.init_app(app)
    login_manager.init_app(app)

    app.jinja_env.add_extension('pyjade.ext.jinja.PyJadeExtension')
    app.jinja_env.pyjade.options['autocloseCode'] = ['assets']

    # @login_manager.user_loader
    # def load_user(id):
    #     return User.query.get(id)


def configure_logging(app):
    app.logger.setLevel(logging.INFO)


def configure_template_filters(app):
    # @app.template_filter()
    # def reverse_filter(s):
    #     return s[::-1]
    #
    # app.jinja_env.filters['imported_filter'] = imported_filter
    pass


def configure_error_handlers(app):
    @app.errorhandler(403)
    def forbidden(error):
        return render_template("403.html"), 403

    @app.errorhandler(404)
    def not_found(error):
        return render_template("404.html"), 404

    @app.errorhandler(500)
    def internal_server_error(error):
        return render_template("500.html"), 500
